;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;								;
; Copyright (c) 2015-2023 Fidelity National Information		;
; Services, Inc. and/or its subsidiaries. All rights reserved.	;
;								;
;	This source code contains the intellectual property	;
;	of its copyright holder(s), and is made available	;
;	under a license.  If you do not know the terms of	;
;	the license, please stop and do not read further.	;
;								;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%ZSHOWVTOLCL(%ZSHOWvbase)	; retrieve locals from a zshow probably in a global
	; %ZSHOWvbase is the target location of the zshow "v" and the only thing this can't and won't restore; failure to do so
	; produces a message, but is not considered an error that stops processing by this utility.
	; in order to have a minimum restriction on what it can instantiate for local variables, this uses a single array with a
	; weird name, which makes it not much fun to read (sorry).
	; It may be invoked either as an extrinsic that returns TRUE (1) for success or FALSE (0) for failure, or with a DO.
	; As of this writing, it is expected to be typically a programmer's tool so, while it does a reasonable amount of condition
	; validation, it does not currently handle any GT.M errors, most likely due to input that's badly formed and fails when used
	; for indirection; rather it relies on the current error trap, and it sends its messages of validation issues to the
	; principal device; see sendmsg below if you want to change that.
	if ""'=$ecode do sendmsg("m0") quit:$quit 0 quit				; want to start "error free"
	if "^"'=$extract($qsubscript(%ZSHOWvbase,0)) do sendmsg("m1",%ZSHOWvbase) quit:$quit 0 quit
	set %ZSHOWvbase("x")=%ZSHOWvbase,%ZSHOWvbase("cnt")=0				; setup & find lvn output from ZSHOW
	set %ZSHOWvbase("depth")=$qlength(%ZSHOWvbase("x"))+1
	set %ZSHOWvbase("length")=$length(%ZSHOWvbase("x"))-1
	for %ZSHOWvbase("i")=1:1:%ZSHOWvbase("depth") quit:"V"=$qsubscript(%ZSHOWvbase("x"),%ZSHOWvbase("i"))
	if %ZSHOWvbase("i")=%ZSHOWvbase("depth") do					; add a trailing "V"
	. if %ZSHOWvbase("x")["(" set %ZSHOWvbase("x")=$extract(%ZSHOWvbase("x"),1,%ZSHOWvbase("length"))_",""V"")"
	. else  set %ZSHOWvbase("x")=%ZSHOWvbase("x")_"(""V"")"
	. set %ZSHOWvbase("depth")=%ZSHOWvbase("depth")+1
	else  if %ZSHOWvbase("i")+1=%ZSHOWvbase("depth"),"V"=$qsubscript(%ZSHOWvbase("x"),%ZSHOWvbase("depth")-1)	;just fine
	else  if %ZSHOWvbase("i")+2=%ZSHOWvbase("depth"),1=$qsubscript(%ZSHOWvbase("x"),%ZSHOWvbase("depth")-1) do	; strip 1
	. set $extract(%ZSHOWvbase("x"),%ZSHOWvbase("length")-1,%ZSHOWvbase("length"))=""
	. set %ZSHOWvbase("depth")=%ZSHOWvbase("depth")-1
	else  do sendmsg("m2",%ZSHOWvbase("x")) quit:$quit 0 quit
	if 1'<$data(@%ZSHOWvbase("x")) do sendmsg("m3",%ZSHOWvbase("x")) quit:$quit 0 quit
	set (%ZSHOWvbase("m4"),%ZSHOWvbase("ret"))=1					; initialization
	for %ZSHOWvbase("index")=1:1 set %ZSHOWvbase("ret")=$$item(.%ZSHOWvbase) quit:""=%ZSHOWvbase("ret")  do
	. set:1'=%ZSHOWvbase("ret") @%ZSHOWvbase("ret")
	do:%ZSHOWvbase("cnt") sendmsg("m7",%ZSHOWvbase("cnt"))
	quit:$quit '%ZSHOWvbase("cnt") quit

item(x)
	new cindex,contdata,cptr,data,indx,key,qoff,raw,ret,value			; comprehensive list or (%ZSHOWvbase,x)
	set data=$data(@x("x")@(x("index")))
	quit:'data ""									; done
	if 10=data do  quit 1								; not a legitimate node from ZWRITE
	. set $extract(x("x"),$length(x("x")))=","_x("index")_")"
	. do sendmsg("m3",x("x"))
	set raw=@x("x")@(x("index")),ret=1
	if "%ZSHOWvbase"=$extract(raw,1,$length("%ZSHOWvbase")) do  quit 1		; can't mess with our working namespace
	. do:%ZSHOWvbase("m4") sendmsg("m4",raw)
	. set %ZSHOWvbase("m4")=0
	set (key,value)=""
	set (cptr,indx,qoff)=1								; find 1st equal-sign not in quotes
	for  do  quit:qoff!'indx
	. set indx=$find(raw,"=",cptr),cptr=$find(raw,"""",cptr)
	. if 'indx do  quit								; didn't find it
	. . set $extract(x("x"),$length(x("x")))=","_x("index")_")",indx=0
	. . do sendmsg("m5",x("x"))
	. if cptr,cptr<indx do
	. . set qoff=0
	. . for cptr=cptr:1:indx set:""""=$extract(raw,cptr) qoff='qoff			; count quotes
	quit:'indx 1
	set key=$extract(raw,1,indx-2),cindex=1
	set value=$extract(raw,indx,$length(raw))					; strip off key
	if 11=data for cindex=1:1 do  quit:'contdata!'cindex				; loop thru continuation nodes
	. set contdata=$data(@x("x")@(x("index"),cindex))
	. quit:'contdata
	. if 1'=contdata do sendmsg("m2",x("x")) set cindex=0 quit			; stop if non-conforming
	. set raw=@x("x")@(x("index"),cindex)
	. if ((2**20)-1)<($zlength(key)+$zlength(value)+$zlength(raw)) do sendmsg("m6",x("x")) set cindex=0 quit	; won't fit
	. set value=value_raw
	quit $select(ret&cindex:key_"="_value,1:1)					; setup assignment or signal skip

sendmsg(msg,parm)	; message thing - could be turned into $zstatus settor if there's a need for set $ecode
	new i,io,m
	if $increment(x("cnt"))								; count skipped items
	set m=$text(@msg)
	set ret=$piece(m,";",2)								; maintain "ret" to exit or not
	set m=$piece(m,";",3,99)
	set:""=m m=msg_" is not a valid message for sendmsg^"_$text(+0)_" or the source module is unavailable"
	set i=$find(m,"~")
	set:i $extract(m,i-1)=$get(parm)
	set io=$io
	use $principal
	write !,m,!
	use io
	quit
m0	;0;^%ZSHOWVTOLCL won't run if ""'=$ecode
m1	;0;~ is not a global reference
m2	;0;~ does not match base for ZSHOW "V" format
m3	;1;~ does not contain ZSHOW "V" data
m4	;1;Cannot restore %ZSHOWvbase
m5	;1;Could not extract a valid key from ~
m6	;1;Could not work ~ into a value within current processing limits
m7	;1;~ items skipped due to errors
