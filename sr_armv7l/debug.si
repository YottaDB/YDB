#################################################################
#								#
# Copyright (c) 2015 Fidelity National Information 		#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

#
# Any debugging macros should be defined here
#

#
# Define debugging macro that verifies 8 byte stack alignment. Note this macro should be called after any initial
# stack adjustment. For example, when a routine is called via CALL, it automatically is no longer aligned due to
# the 8 byte return address on the stack. Since many routines need at least 8 bytes of save area, this is not an
# issue but for those short routines that need no saving, the 8 byte difference should be addressed before calling
# this macro.
#
.macro	CHKSTKALIGN
	.ifdef	DEBUG
	.data
	.extern ERR_GTMCHECK
	.text
	.extern rts_error
	tst	sp, #7					/* Check for 8 byte alignment */
	beq	stkok\@					/* Branch around if stack ok */
	/*
	 * Stack is not aligned - raise error
	 */
	ldr	r1, =ERR_GTMCHECK
	ldr	r1, [r1]
	mov	r0, #1
	bl	rts_error
stkok\@:
	.endif
.endm

.macro CHKXFREG
	.ifdef	DEBUG
	.data
	.extern ERR_GTMCHECK
	.text
	.extern	rts_error
	ldr	r12, =xfer_table
	cmp	r12, r5
	beq	fpok\@
	/*
	 * r7 isn't xfer_table - raise error
	 */
	ldr	r1, =ERR_GTMCHECK
	ldr	r1, [r1]
	mov	r0, #1
	bl	rts_error
fpok\@:
	.endif
.endm
