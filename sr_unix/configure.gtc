#!/bin/sh
#################################################################
#								#
# Copyright (c) 2009-2022 Fidelity National Information		#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
# Copyright (c) 2017-2025 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
# Copyright (c) 2017-2018 Stephen L Johnson.			#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

if [ ! -t 0 ] ; then set -x; fi	# debug flow of configure if invoked non-interactive (useful in case of errors)

. ./arch.gtc

# Path to the correct echo program
# depending on the list of locales configured, locale -a might be considered a binary output.
# grep needs -a option to process the output as text but -a is not supported on the non-linux servers we have.
if [ $arch = "linux" ]; then
	echo="/bin/echo -e"
	binaryopt="-a"
else
	echo=/bin/echo
	binaryopt=""
fi

# Options to ps
psopts="-ea"

# GTCM definitions
if [ -f gtcm_server ]; then
	deliver_gtcm="yes"
else
	deliver_gtcm="no"
fi

if [ -f gtcm_gnp_server ]; then
	deliver_gtcm_gnp="yes"
else
	deliver_gtcm_gnp="no"
fi

# create symbolic links if utf8 directory exists.  Ignore the "file exists" errors for the .o files
# which exist in both directories.

if [ -d utf8 ]; then
	(cd utf8; ln -s ../* . 2> /dev/null; \rm utf8; exit 0)
fi

# Native shared library extension.
ext=".so"

# Flags to build shared libraries of M routines
if [ "ibm" = $arch ] ; then ldflags="-brtl -G -bexpfull -bnoentry -b64" ; ldcmd="ld" # AIX
elif [ "linux" = $arch ] ; then ldflags="-shared -z noexecstack" ; ldcmd="ld" # Linux - all platforms
else echo "Shared libary ldflags not set for this platform"; exit 1
fi

# Binaries
binaries="mupip yottadb libyottadb$ext lke dse"

# Normal scripts - executed by anyone
nscripts="lowerc_cp"

# Root scripts - only executed by root
rscripts=""
if [ $deliver_gtcm = "yes" ]; then
	rscripts="$rscripts gtcm_run gtcm_slist"
	binaries="$binaries gtcm_server"
fi

if [ $deliver_gtcm_gnp = "yes" ]; then
	binaries="$binaries gtcm_gnp_server"
fi

# Help files
hlpfiles="*help.dat *help.gld *.h"

# Other files (left here for future use)
ofiles="$hlpfiles"

# Files that need to have $ydb_dist, $echo, etc. set in them.
pathmods="ydb.gtc ydb_env_set.gtc ydb_env_unset.gtc gdedefaults.gtc"

# Files deprecated in various releases. These should explicitly removed if installation is done on an existing directory.
deprecatedfiles="geteuid semstat2 ftok"

if [ $deliver_gtcm = "yes" ]; then
	pathmods="$pathmods gtcm_run.gtc gtcm_slist.gtc"
fi

ydb_id=`command -v id`
euid=`$ydb_id -un`	# Get effective user id
if [ "$euid" != "root" ] ; then
	$echo "You must run Configure as root."
	exit 1
fi

$echo "                     YottaDB Configuration Script"
$echo "Copyright 2009-YYYY Fidelity Information Services, Inc. and/or its subsidiaries."
$echo "Use of this software is restricted by the provisions of your license agreement."
$echo "Copyright (c) 2017-2019 YottaDB LLC and/or its subsidiaries."
$echo "All rights reserved."
$echo ""

# Helper function
read_yes_no()
{
	read resp
	response=`echo $resp | tr '[a-z]' '[A-Z]'`
	if [ "Y" = $response -o "YES" = $response ] ; then
		echo "yes"
	else
		echo "no"
	fi
}

issystemd=`command -v systemctl`
if [ "" != "$issystemd" ] ; then
	# It is a systemd installation
	# Check if RemoveIPC=no is set. If not, prompt user for okay to set this.
	logindconf="/etc/systemd/logind.conf"
	removeipcopt=`awk -F = '/^RemoveIPC/ {opt=$2} END{print opt}' $logindconf`
	if [ "no" != "$removeipcopt" ] ; then
		# RemoveIPC=no is NOT the final settings in the file
		ipcissue1="If RemoveIPC=yes is configured for systemd, ipcs (database shm & sem)"
		ipcissue1="$ipcissue1 are removed for a non-system user's processes when that user logs out."
		ipcissue2="That can cause database operations to fail with mysterious errors."

		ipcline1="# YottaDB : Override systemd default of RemoveIPC=yes to prevent automatic ipc removal of"
		ipcline1="$ipcline1 Shared Memory Segments and Semaphore Arrays of orphaned databases"
		ipcline2="RemoveIPC=no"
		ipccmd="systemctl restart systemd-logind"

		echo "$ipcissue1"
		echo "$ipcissue2"
		echo "The installation would like to add the below two lines to $logindconf"
		echo "   $ipcline1"
		echo "   $ipcline2"
		echo "And issue the below command to restart systemd-logind"
		echo "   $ipccmd"
		if [ -z ${ydb_change_removeipc} ] ; then
			echo -n "Do you wish to proceed (Y/N)? "
			answer=`read_yes_no`
		else
			answer=${ydb_change_removeipc}
		fi
		if [ "yes" != "$answer" ] ; then
			echo $ipcissue1
			echo $ipcissue2
			echo "YottaDB may not function correctly until the below two lines are added to $logindconf"
			echo "   $ipcline1"
			echo "   $ipcline2"
			echo "and systemd-logind is restarted using the below command, for example or by rebooting the system"
			echo "   $ipccmd"
		else
			echo $ipcissue1
			echo $ipcissue2
			echo "YottaDB may not function correctly until systemd-logind is restarted using the below command,"
			echo "for example or by rebooting the system"
			echo "   $ipccmd"
		fi
		echo $ipcline1 >> $logindconf
		echo $ipcline2 >> $logindconf
	fi
fi
# Native super user and group
rootuser=root
bingroup=root
defowner=root

# create temporary file to test for valid user and group names
touch tmp_owngrp
$echo "What user account should own the files? ($defowner) \c"
read resp
if [ ! -t 0 ] ; then echo "$resp"; fi
if [ "$resp" = "" ] ; then
	owner=$defowner
else
	owner=$resp
fi

chown $owner tmp_owngrp 2> /dev/null
if [ 0 != "$?" ] ; then
	$echo $owner is not a valid user name - exiting!
	\rm tmp_owngrp
	exit
fi

$echo "What group should own the files? ($bingroup) \c"
read resp
if [ ! -t 0 ] ; then echo "$resp"; fi
if [ "$resp" != "" ] ; then
	bingroup=$resp
fi

chgrp $bingroup tmp_owngrp 2> /dev/null
if [ 0 != "$?" ] ; then
	$echo $bingroup is not a valid group name - exiting!
	\rm tmp_owngrp
	exit 1
fi

$echo "Should execution of YottaDB be restricted to this group? (y or n) \c"
read resp
if [ ! -t 0 ] ; then echo "$resp"; fi
if [ "$resp" = "Y" -o "$resp" = "y" ] ; then
	# root is an invalid group to be restricted
	if [ 0 = $bingroup -o "root" = $bingroup ] ; then
		$echo YDB-E-GROUPNOTVALID - $bingroup not allowed to be a restricted group - exiting!
		exit 1
	fi
	# for all owners other than root or bin do an owner in group membership check
	if [ 0 != $owner -a "root" != $owner -a  `groups $owner | grep -w -c $bingroup` -eq 0 ] ; then
		$echo YDB-E-NOTINGROUP - $owner is not a member of $bingroup - exiting!
		exit 1
	fi
	group=$bingroup
fi

\rm tmp_owngrp

$echo "In what directory should YottaDB be installed? \c"
read ydbdist
if [ ! -t 0 ] ; then echo "$ydbdist"; fi

# if ydbdist is relative then need to make it absolute

if [ `$echo $ydbdist | grep -c '^/'` -eq 0 ] ; then
    ydbdist=`pwd`/$ydbdist
fi

# ensure that canonical paths do not exceed PATH_MAX
getconf PATH_MAX $ydbdist | \
	awk '{max=$0-max;if(max<0)max+=1024;if(length(dist)>max){print dist" exceeds the maximum path length: "max;exit 1}}' \
		dist=$ydbdist max=50 || exit
$echo ""

if [ -d $ydbdist ]; then
	$echo "Directory $ydbdist exists. If you proceed with this installation then"
	$echo "some files will be over-written. Is it ok to proceed? (y or n) \c"
else
	$echo "Directory $ydbdist does not exist. Do you wish to create it as part of"
	$echo "this installation? (y or n) \c"
fi
read resp
if [ ! -t 0 ] ; then echo "$resp"; fi
if [ "$resp" = "Y" -o "$resp" = "y" ] ; then
	mkdir -p        $ydbdist
	chmod ug-s,-t   $ydbdist
	mkdir -p        $ydbdist/plugin/r $ydbdist/plugin/o
	chmod 0755      $ydbdist/plugin/r $ydbdist/plugin/o $ydbdist
	chown $owner    $ydbdist/plugin/r $ydbdist/plugin/o $ydbdist
	chgrp $bingroup $ydbdist/plugin/r $ydbdist/plugin/o $ydbdist
	remove_deprecated=1
else
	exit
fi

if [ ! -w $ydbdist ]; then
	$echo "Directory $ydbdist is not writeable, so exiting"
	exit
fi

server_id=42

$echo ""
$echo "Installing YottaDB...."
$echo ""

if [ -d "utf8" ]; then
	unset icu_version
	doutf8=1
	# If package has utf8 directory, see if system has libicu and locale
	$echo "Should UTF-8 support be installed? (y or n) \c"
	read resp
	if [ ! -t 0 ] ; then echo "$resp"; fi
	if [ "$resp" = "Y" -o "$resp" = "y" ] ; then
<<<<<<< HEAD
		# The below line is copied from the "icu_version()" function in sr_unix/ydbinstall.sh
		# The GT.M logic uses pkg-config to determine the ICU version. But we are trying to stay away from
		# pkg-config in YottaDB for ydbinstall.sh and configure.gtc as it takes up a lot of space in the
		# docker image to include the pkg-config package. Hence the use of "ldconfig" instead.
		icu_version=$(ldconfig -p | grep -m1 -F libicuio.so. | cut -d" " -f1 | sed 's/.*libicuio.so.\([a-z]*\)\([0-9\.]*\)/\2.\1/;s/\.$//;')
		if [ "$icu_version" != "" ] ; then
			maj=`$echo $icu_version | cut -f 1 -d "."`
			if [ "$maj" -ge "49" ] ; then
				# Assuming the input is of the form 52.1. As of ICU 49 (aka 4.9),
				# the version reported by "pkg-config --modversion icu-io"
				# is <major><minor>.<milli> and not <major>.<minor>
				majmin=$maj
=======
		if [ "linux" = $arch ]; then
			if [ -x "$(command -v pkg-config)" -a $(pkg-config --exists icu-io; echo $?) -eq 0 ]; then
				versioncmd="pkg-config --modversion icu-io"
				libcmd="pkg-config --variable=libdir icu-io"
			elif [ -x "$(command -v icu-config)" ] ; then
				versioncmd="icu-config --version"
				libcmd="icu-config --libdir"
			elif [ -x "$(command -v pkg-config)" -a $(pkg-config --exists icu; echo $?) -eq 0 ]; then
				versioncmd="pkg-config --modversion icu"
				libcmd="pkg-config --variable=libdir icu"
			fi
			if [ -n "$versioncmd" ]; then
				icu_version=`$versioncmd | awk '{ver=+$0;if(ver>5){ver=ver/10}printf("%.1f\n",ver);exit}'`
				extendlibpath=`$libcmd`
			fi
			if [ "$icu_version" != "" ] ; then
				maj=`$echo $icu_version | cut -f 1 -d "."`
				if [ "$maj" -ge "49" ] ; then
					# Assuming the input is of the form 52.1. As of ICU 49 (aka 4.9),
					# icu-config --version reports <major><minor>.<milli> and not <major>.<minor>
					majmin=$maj
				else
					# Assuming the input is of the form 4.2.1
					majmin=`$echo $icu_version | cut -d "." -f 1,2 | sed 's/\.//'`
				fi
				if [ "$majmin" -lt "36" ] ; then
					$echo "ICU version version found : $icu_version"
					$echo "Install ICU version 3.6 or above to enable UTF-8 support."
					doutf8=0
				fi
>>>>>>> fdfdea1e (GT.M V7.1-002)
			else
				# Assuming the input is of the form 4.2.1
				majmin=`$echo $icu_version | cut -d "." -f 1,2 | sed 's/\.//'`
			fi
			if [ "$majmin" -lt "36" ] ; then
				$echo "ICU version version found : $icu_version"
				$echo "Install ICU version 3.6 or above to enable UTF-8 support."
				doutf8=0
			fi
		else
			$echo "Could not find ICU version in the default location."
			doutf8=0
		fi
		# Look for locale
		utflocale=`locale -a | grep $binaryopt -iE '\.utf.?8$' | head -n1`
		if [ "$utflocale" = "" ] ; then
			$echo "UTF-8 locale not found."
			doutf8=0
		fi
		if [ "$doutf8" -eq 0 ] ; then
			$echo "UTF-8 support was requested, but not all dependencies were satisfied."
			$echo "Please fix the above and re-run installation."
			exit 1
		fi
		if [ "$doutf8" -eq 1 -a "linux" = $arch ]; then
			ydb_icu_version=$icu_version
			export ydb_icu_version
		fi
	else
		doutf8=0
	fi
	# The answer to the below question is currently not used anywhere but the question is kept as is
	# as otherwise removing it would be an interface change (ydbinstall.sh of different YottaDB releases
	# communicates through these questions with configure.gtc and we don't want a backward incompatible change).
	$echo "Should deprecated components be installed? (y or n) \c"
	read resp
	if [ ! -t 0 ] ; then echo "$resp"; fi
	if [ "$resp" = "Y" -o "$resp" = "y" ] ; then
		ydb_deprecated="Y"
	else
		ydb_deprecated="N"
	fi
else
	# If utf8 dir does not exist in package, can't install UTF-8 support
	doutf8=0
fi

# Solaris 10 bourne shell does not support ${var#word} syntax
install_dest=$ydbdist
if [ X"$gtm_destdir" != X"" ] ; then
	install_dest=`echo $install_dest | sed "s;${gtm_destdir};;"`
fi

# Modify the scripts as necessary for target configuration
cat << SEDSCRIPT > sedin$$
s|ARCH|$arch|g
s|ECHO|"$echo"|g
s|GTMDIST|${install_dest}|g
s|YDBDIST|${install_dest}|g
s|SERVERID|$server_id|g
SEDSCRIPT
for i in $pathmods
do
	dest=`basename $i .gtc`
	sed -f sedin$$ $i > $dest
	if [ "$doutf8" -ne 0 ]; then
		cd utf8
		if ( test -f "$dest" ) then \rm $dest; fi
		ln -fs ../$dest $dest
		cd ..
	fi
done
\rm sedin$$
if [ "$doutf8" -ne 0 ]; then
	if [ ! -d $ydbdist/utf8 ]; then
		mkdir -p $ydbdist/utf8 $ydbdist/plugin/o/utf8
		chmod 0755 $ydbdist/utf8 $ydbdist/plugin/o/utf8
		chown ${owner}:${bingroup} $ydbdist/utf8 $ydbdist/plugin/o/utf8
	fi
fi

# Remove deprecated files first if applicable
if [ -n "$remove_deprecated" ]; then
	$echo ""
	$echo "Checking for deprecated files in $ydbdist"
	$echo ""
	for file in $deprecatedfiles
	do
		if [ -f "$ydbdist/$file" -o -f "$ydbdist/utf8/$file" ]; then
			echo "	Removing $file"
			rm -f $ydbdist/$file $ydbdist/utf8/$file
		fi
	done
fi

# Install libgtmshr.so as a soft link to libyottadb.so for backward compatibility purposes just in case
ln -fs ./libyottadb$ext $ydbdist/libgtmshr$ext || echo ln -fs ./libyottadb$ext $ydbdist/libgtmshr$ext
ln -fs ./ydb_env_set $ydbdist/gtmprofile || echo ln -fs ./ydb_env_set $ydbdist/gtmprofile
ln -fs ./ydb $ydbdist/gtm || echo ln -fs ./ydb $ydbdist/gtm
if [ "$doutf8" -ne 0 ]; then
	ln -fs ./libyottadb$ext $ydbdist/utf8/libgtmshr$ext || echo ln -fs ./libyottadb$ext $ydbdist/utf8/libgtmshr$ext
	ln -fs ./ydb_env_set $ydbdist/utf8/gtmprofile || echo ln -fs ./ydb_env_set $ydbdist/utf8/gtmprofile
	ln -fs ./ydb $ydbdist/utf8/gtm || echo ln -fs ./ydb $ydbdist/utf8/gtm
fi

# Install COPYING as well as README.md (YottaDB) or README.txt (GT.M) if it is applicable
for file in COPYING README.md README.txt
do
	if [ -f $file ]; then
		cp -p $file $ydbdist
		if [ "$doutf8" -ne 0 ]; then
			ln -fs ../$file $ydbdist/utf8/$file
		fi
	fi
done

# Install custom_errors_sample.txt if it is applicable
file=custom_errors_sample.txt
if [ -f $file ]; then
	cp -p $file $ydbdist
	if [ "$doutf8" -ne 0 ]; then
		ln -fs ../$file $ydbdist/utf8/$file
	fi
fi
# Install the .cshrc and .profile files
for i in gdedefaults gtmgblstat.xc
do
	if [ -e $i ]; then
		cp -p $i $ydbdist
		chmod 0444 $ydbdist/$i
		chown $owner $ydbdist/$i
	fi
done

for i in ydb ydb_env_set ydb_env_unset gtmcshrc
do
	if [ -e $i ]; then
		cp -p $i $ydbdist
		chown $owner $ydbdist/$i
	fi
done
chmod 0755 $ydbdist/ydb

# Install the normal scripts
for i in $nscripts
do
	cp -p $i $ydbdist
	chmod 0755 $ydbdist/$i
	chown $owner $ydbdist/$i
done

# Install the root scripts
for i in $rscripts
do
	cp -p $i $ydbdist
	chmod 0744 $ydbdist/$i
	chown $rootuser $ydbdist/$i
done

# Install the normal binaries
for i in $binaries
do
	install -g $bingroup -o $owner -m 644 $i $ydbdist
	# Install *.dbg file (debug symbol file) if it exists for the binary
	basebinaryname=`basename $i .so`	# needed to take .so out of libyottadb.so; is a no-op for other non .so binaries
	if [ -e $basebinaryname.dbg ]; then
		install -g $bingroup -o $owner -m 644 $basebinaryname.dbg $ydbdist
	fi
done

# Install other individual files
for i in  $ofiles
do
	cp -p $i $ydbdist
	chown $owner $ydbdist/$i
done

# For linux systems, attempt to execute the chcon command to allow use of the libyottadb shared library. This
# command is required on many modern SELinux based systems but depends on the filesystem in use (requires context
# support). For that reason, we attempt the command and if it works, great. If it doesn't, oh well we tried.
if [ -f /usr/bin/chcon ]; then
	(chcon -t texrel_shlib_t $ydbdist/libyottadb$ext 2>/dev/null; exit 0)
fi

<<<<<<< HEAD
# Create $ydbdist/plugin directory
mkdir -p $ydbdist/plugin
chmod 0755 $ydbdist/plugin
chown $owner $ydbdist/plugin
chgrp $bingroup $ydbdist/plugin
=======
# Create $gtmdist/plugin/gtmcrypt directory if this platform supports encryption

# Define variables to denote plugin and gtmcrypt directory names
plugin="plugin"
plugin_gtmcrypt="$plugin/gtmcrypt"

# Gtmcrypt scripts
gtmcryptscripts="gen_sym_key.sh encrypt_sign_db_key.sh gen_keypair.sh pinentry-gtm.sh"
gtmcryptscripts="$gtmcryptscripts import_and_sign_key.sh gen_sym_hash.sh show_install_config.sh"

# Gtmcrypt related M file
gtmcryptmfile="pinentry.m"

# Gtmcrypt input files
gtmcryptinfiles="gpgagent.tab.in gtmtlsfuncs.tab.in"

# Gtmcrypt source files
gtmcryptsrcfiles="Makefile README gtmcrypt_ref.c gtmcrypt_ref.h gtmcrypt_interface.h maskpass.c"
gtmcryptsrcfiles="$gtmcryptsrcfiles gtmcrypt_dbk_ref.c gtmcrypt_dbk_ref.h gtmcrypt_pk_ref.c gtmcrypt_pk_ref.h"
gtmcryptsrcfiles="$gtmcryptsrcfiles gtmcrypt_sym_ref.h gtmcrypt_sym_ref.c gtm_tls_interface.h gtm_tls_impl.h"
gtmcryptsrcfiles="$gtmcryptsrcfiles gtm_tls_impl.c gtm_tls_externalcalls.h gtmcrypt_util.c gtmcrypt_util.h"
gtmcryptsrcfiles="$gtmcryptsrcfiles $gtmcryptmfile $gtmcryptinfiles"

dogtmcrypt=0
if [ -d "$plugin_gtmcrypt" ]; then
	dogtmcrypt=1
	# Create plugin directory and gtmcrypt directory
	mkdir -p $gtmdist/plugin/gtmcrypt
	chmod 0755 $gtmdist/plugin
	chown $owner $gtmdist/plugin
	chgrp $bingroup $gtmdist/plugin
	chmod 0755 $gtmdist/plugin/gtmcrypt
	chown $owner $gtmdist/plugin/gtmcrypt/
	chgrp $bingroup $gtmdist/plugin/gtmcrypt

	# Tar the source files
	cat > $plugin_gtmcrypt/README << EOF
#
# WARNING: This file was generated by the GT.M install script at install time.
#
# Dependency information:
#  Please install a compiler toolchain and libgcrypt, libgpgme, libconfig, and
#  libssl development libraries. On Debian you can do:
#    sudo apt-get install libgcrypt11-dev libgpgme11-dev libconfig-dev libssl-dev
#
# Installation instructions:
#  You may need to edit the Makefile to add include (IFLAGS) and library paths
#  (LIBFLAGS) for your system.
#
#  The commands below to compile, install and set the file permissions on the
#  encryption plugin libraries make the following assumptions:
#    - The shell is bourne shell compatible
#    - The user is root
#    - The permissions defined for the gtm installation are appropriate for the
#      plug-in
#
#  You should be able to cut and paste the following commands
#
gtm_dist="$gtmdist"
export gtm_dist
make && make install && make clean
find \$gtm_dist/plugin -type f -exec chown ${owner}:${bingroup} {} +
EOF
	if [ "$group" != "" ] ; then
		echo "chmod -R o-rwx \$gtm_dist/plugin" >> $plugin_gtmcrypt/README
	fi
	(cd $plugin_gtmcrypt			&& \
	 chmod 0644 $gtmcryptsrcfiles		&& \
	 chmod 0755 $gtmcryptscripts 		&& \
	 chown ${owner}:${bingroup} *		&& \
	 tar -cvf $gtmdist/$plugin_gtmcrypt/source.tar $gtmcryptsrcfiles $gtmcryptscripts >/dev/null 2>&1)
	chmod 0644 $gtmdist/$plugin_gtmcrypt/source.tar
	chown ${owner}:${bingroup} $gtmdist/$plugin_gtmcrypt/source.tar
	rm $plugin_gtmcrypt/README
fi
>>>>>>> fdfdea1e (GT.M V7.1-002)

# Install GDE, GTMHELP, and all the percent routines
cp -p *.o *.m $ydbdist
# The below commented section used to previously remove _DSEWRAP.m. But GT.M V7.0-000 removed _DSEWRAP.m so there is no need
# for this code. We keep the below check commented so a reader knows there was a purpose for the "ydb_deprecated" variable.
# if [ "N" = $ydb_deprecated ] ; then
# 	rm $ydbdist/_DSEWRAP.m
# fi

# Install a mirror image (using soft links) of $ydbdist under $ydbdist/utf8 if this platform can support "UTF-8" mode.
if [ "$doutf8" -ne 0 ]; then
	cd utf8
	for file in *
	do
		# Skip directories
		if [ -d "$file" ]; then
			continue
		fi
		# Skip gtmsecshr/dir
		if [ "$file" = "gtmsecshr" -o "$file" = "gtmsecshrdir" ]; then
			continue
		fi
		# Install .o files
		base="`basename $file .o`"
		if [ "$base" != "$file" ]; then
			cp -p "$file" $ydbdist/utf8
		else
			# Soft link everything else
			if [ -f $ydbdist/utf8/"$file" ]; then
				\rm -f $ydbdist/utf8/"$file"
			fi
			if [ -f $ydbdist/"$file" ]; then
				ln -fs ../"$file" $ydbdist/utf8/"$file"
			fi
		fi
	done
	ln -fs ../plugin $ydbdist/utf8/plugin
	cd ..
fi

$echo ""
$echo "All of the YottaDB MUMPS routines are distributed with uppercase names."
$echo "You can create lowercase copies of these routines if you wish, but"
$echo "to avoid problems with compatibility in the future, consider keeping"
$echo "only the uppercase versions of the files."
$echo ""
$echo "Do you want uppercase and lowercase versions of the MUMPS routines? (y or n) \c"
read resp
if [ ! -t 0 ] ; then echo "$resp"; fi
if [ "$resp" = "Y" -o "$resp" = "y" ] ; then
	$echo ""
	$echo "Creating lowercase versions of the MUMPS routines."
	(cd $ydbdist; ./lowerc_cp *.m)
	if [ "$doutf8" -ne 0 ]; then
		(cd $ydbdist/utf8; ./lowerc_cp *.m)
	fi
fi

# Change mode to executable for yottadb and libyottadb to do the compiles
chmod 755 $ydbdist/yottadb $ydbdist/libyottadb$ext

ydb_routines=$ydbdist
ydb_gbldir=$ydbdist/mumps.gld
ydb_dist=$ydbdist
export ydb_dist
export ydb_routines
export ydb_gbldir

$echo ""
$echo "Compiling all of the MUMPS routines. This may take a moment."
$echo ""

# Ensure we are NOT in UTF-8 mode
ydb_chset="M"
export ydb_chset
(cd $ydbdist; ./yottadb -noignore *.m; $echo $?>compstat ; $ldcmd $ldflags -o libyottadbutil$ext *.o; $echo $?>>$ydbdist/compstat)

# Now work on UTF-8 mode
if [ "$doutf8" -ne 0 ]; then
	# Enclose UTF-8 operations inside a subshell. This avoids changing the current M mode execution
	(
		# Ensure we ARE in UTF-8 mode
		utflocale=`locale -a | grep $binaryopt -iE 'en_us\.utf.?8$' | head -n1`
		if [ "$utflocale" = "" ]; then
			# If no locale defined, try C.UTF-8
			utflocale="C.UTF-8"
		fi
		LC_CTYPE=$utflocale
		export LC_CTYPE
		unset LC_ALL
		ydb_chset="UTF-8"
		export ydb_chset
		(ydb_dist=$ydbdist/utf8; export ydb_dist; cd $ydb_dist; ./yottadb -noignore *.m; $echo $?>>$ydbdist/compstat; \
		$ldcmd $ldflags -o libyottadbutil$ext *.o; $echo $?>>$ydbdist/compstat)
	)
fi

# Install libgtmutil.so as a soft link to libyottadbutil.so for backward compatibility purposes just in case
ln -s ./libyottadbutil$ext $ydbdist/libgtmutil$ext || echo ln -s ./libyottadbutil$ext $ydbdist/libgtmutil$ext
if [ "$doutf8" -ne 0 ]; then
	ln -s ./libyottadbutil$ext $ydbdist/utf8/libgtmutil$ext || echo ln -s ./libyottadbutil$ext $ydbdist/utf8/libgtmutil$ext
fi

# Install mumps as a soft link to yottadb for backward compatibility purposes just in case
# Also install ydbsh as a soft link to yottadb to help implement shebang functionality (YDB#1084)
for binary in mumps ydbsh
do
	ln -s ./yottadb $ydbdist/$binary || echo ln -s ./yottadb $ydbdist/$binary
	if [ "$doutf8" -ne 0 ]; then
		ln -s ./yottadb $ydbdist/utf8/$binary || echo ln -s ./yottadb $ydbdist/utf8/$binary
	fi
done

# Install soft links from gtm*.h files to corresponding ydb*.h files
ydbhdrfiles="ydb_tls_interface.h ydbcrypt_interface.h"
for ydbhdrfile in $ydbhdrfiles
do
	# Install gtm* header file as a soft link to ydb* header file for backward compatibility purposes just in case
	gtmhdrfile=`echo $ydbhdrfile | sed 's/ydb/gtm/'`
	ln -s ./$ydbhdrfile $ydbdist/$gtmhdrfile || echo ln -s ./$ydbhdrfile $ydbdist/$gtmhdrfile
	if [ "$doutf8" -ne 0 ]; then
		ln -s ./$ydbhdrfile $ydbdist/utf8/$gtmhdrfile || echo ln -s ./$ydbhdrfile $ydbdist/utf8/$gtmhdrfile
	fi
done

# Change mode to executable for the normal binaries, but not shared libraries
for i in $binaries
do
	basebinaryname=${i%%.so}
	if [ $i = $basebinaryname ] ; then
		chmod 755 $ydbdist/$i
		if [ -e $ydbdist/$basebinaryname.dbg ]; then
			chmod 755 $ydbdist/$basebinaryname.dbg
		fi
	fi
done

chmod 0644 $ydbdist/*.m
chmod 0644 $ydbdist/*.o
chown $owner $ydbdist/*.m
chown $owner $ydbdist/*.o
chown $owner $ydbdist/*.txt
chgrp $bingroup $ydbdist/*.m
chgrp $bingroup $ydbdist/*.o
chgrp $bingroup $ydbdist/*.txt

if [ "$doutf8" -ne 0 ]; then
	chmod 0644 $ydbdist/utf8/*.m
	chmod 0644 $ydbdist/utf8/*.o
	chown $owner $ydbdist/utf8
	chown $owner $ydbdist/utf8/*.m
	chown $owner $ydbdist/utf8/*.o
	chown $owner $ydbdist/utf8/*.txt
	chgrp $bingroup $ydbdist/utf8/*.m
	chgrp $bingroup $ydbdist/utf8/*.o
	chgrp $bingroup $ydbdist/utf8/*.txt
fi

if [ -f $ydb_dist/libyottadbutil$ext ] ; then
    ydb_routines="$ydb_dist/libyottadbutil$ext $ydbdist"
else
    ydb_routines="$ydbdist"
fi
export ydb_routines

other_object_files=""
csh_script_files=""

# make database files read only
chmod 0444 $ydbdist/*.dat
chmod 0444 $ydbdist/*.gld

# $other_object_files, $csh_script_files should be removed unconditionally
savedir=`pwd`
# temporarily change to $ydbdist
cd $ydbdist
\rm -rf $other_object_files $csh_script_files lowerc_cp

if [ -d utf8 ]; then
	cd utf8
	\rm -rf $other_object_files $csh_script_files lowerc_cp
fi
# change back to original directory
cd $savedir

# Optionally remove .o files if they are in a shared library
if [ -f $ydb_dist/libyottadbutil$ext ] ; then
	chown ${owner}:${bingroup} $ydb_dist/libyottadbutil$ext
	chmod 755 $ydb_dist/libgtmutil$ext
	$echo ""
	$echo "Object files of M routines placed in shared library $ydb_dist/libyottadbutil$ext"
	$echo "Keep original .o object files (y or n)? \c"
	read resp
	if [ ! -t 0 ] ; then echo "$resp"; fi
	if [ "n" = "$resp" -o "N" = "$resp" ] ; then \rm -f $ydb_dist/*.o $ydb_dist/utf8/*.o ; fi
	$echo ""
	if [ -f $ydb_dist/utf8/libyottadbutil$ext ] ; then
		chown ${owner}:${bingroup} $ydb_dist/utf8/libyottadbutil$ext
		chmod 755 $ydb_dist/utf8/libgtmutil$ext
	fi
fi

# change group ownership of all files if group restricted
# otherwise change to the default as some files were created with root group
if [ "$group" != "" ] ; then
	chgrp -R $group $ydbdist
	chmod -R o-rwx $ydbdist
else
	chgrp -R $bingroup $ydbdist
fi

# Install real gtmsecshr with special permissions in $ydbdist/gtmsecshrdir
tgtmsecshrdir=$ydbdist/gtmsecshrdir
mkdir -p $tgtmsecshrdir
chmod 700 $tgtmsecshrdir
chgrp $bingroup $tgtmsecshrdir

# Install gtmsecshr and the wrapper with special permissions
if [ $arch = "linux" ]; then
	install -m 4555 -o root -g $bingroup gtmsecshr $ydbdist
	install -m 4500 -o root -g $bingroup gtmsecshrdir/gtmsecshr $tgtmsecshrdir/gtmsecshr
elif [ $arch = "ibm" ]; then
	/usr/bin/install -f $ydbdist -M 4555 -O root -G $bingroup gtmsecshr
	/usr/bin/install -f $tgtmsecshrdir -M 4500 -O root -G $bingroup gtmsecshrdir/gtmsecshr
elif [ -x /usr/sbin/install ]; then
	/usr/sbin/install -f $ydbdist -m 4555 -u root -g $bingroup gtmsecshr $ydbdist
	/usr/sbin/install -f $tgtmsecshrdir -m 4500 -u root -g $bingroup gtmsecshrdir/gtmsecshr $tgtmsecshrdir
else
	install -f $ydbdist -m 4555 -u root -g $bingroup gtmsecshr $ydbdist
	install -f $tgtmsecshrdir -m 4500 -u root -g $bingroup gtmsecshrdir/gtmsecshr $tgtmsecshrdir
fi

strip $ydbdist/gtmsecshr > /dev/null 2>&1
strip $tgtmsecshrdir/gtmsecshr > /dev/null 2>&1

if [ -d $ydbdist/utf8 ]; then

	# Delete the gtmsecshr symlink
	if [ -f $ydbdist/utf8/gtmsecshr -o -h $ydbdist/utf8/gtmsecshr ]; then
		\rm -f $ydbdist/utf8/gtmsecshr
	fi
	ln -f $ydbdist/gtmsecshr $ydbdist/utf8/gtmsecshr || \
		echo ln -f $ydbdist/gtmsecshr $ydbdist/utf8/gtmsecshr

	# Delete the gtmsecshrdir symlink
	if [ -f $ydbdist/utf8/gtmsecshrdir -o -h $ydbdist/utf8/gtmsecshrdir ]; then
		\rm -f $ydbdist/utf8/gtmsecshrdir
	fi
	mkdir -p $ydbdist/utf8/gtmsecshrdir
	chmod 0500 $ydbdist/utf8/gtmsecshrdir
	ln -f $ydbdist/gtmsecshrdir/gtmsecshr $ydbdist/utf8/gtmsecshrdir/gtmsecshr || \
		echo ln -f $ydbdist/gtmsecshrdir/gtmsecshr $ydbdist/utf8/gtmsecshrdir/gtmsecshr

fi

# change group ownership of wrapper if group restricted
# also remove user privileges for wrapper if group changed
if [ "$group" != "" ] ; then
	chgrp $group $ydbdist/gtmsecshr
	$echo ""
	$echo "Removing world permissions from gtmsecshr wrapper since group restricted to \"$group\""
	chmod 4550 $ydbdist/gtmsecshr
fi

# leave nothing writeable
chmod -R a-w $ydbdist

# if we had a yottadb compilation error then remove executable bit recursively and exit
# this could include compile and/or library load errors
if [ 0 != `grep -c '[1-9]' $ydb_dist/compstat` ]; then
	$echo ""
	$echo "YottaDB installation FAILED -- please review error messages"
	$echo ""
	( cd $ydb_dist && find . -type f -exec chmod a-x {} + )
	exit 1
fi

\rm -f $ydbdist/compstat

if [ "$gtm_icu_version" != "" ] ; then
	icumessage=" Used gtm_icu_version=$gtm_icu_version for UTF-8 installation."
fi
$echo ""
$echo "Installation completed.$icumessage"
$echo "Would you like all the temporary files removed from this directory? (y or n) \c"
read resp
if [ ! -t 0 ] ; then echo "$resp"; fi

if [ "$resp" = "Y" -o "$resp" = "y" ] ; then
	\rm -rf $binaries $pathmods $rscripts $nscripts $dirs configure \
		*.gtc gtm* gde* GDE*.o _*.m _*.o mumps.dat mumps.gld $other_object_files $csh_script_files lowerc_cp\
		*.hlp core *.h *.m *help.dat *help.gld COPYING README.md README.txt
	\rm -rf GETPASS.o plugin GTMHELP.o custom_errors_sample.txt
	if [ -d utf8 ]; then
		\rm -rf utf8
	fi
fi

# Save long listing of files, including permissions and sha256 for future reference
ls -l $ydbdist | grep ^\\W | grep -v install_permissions.log$ >$ydbdist/install_permissions.log
chmod 0444 $ydbdist/install_permissions.log
chown ${owner}:${bingroup} $ydbdist/install_permissions.log
OPENSSL=$(command -p command -v openssl)
if [ -x "$OPENSSL" ]; then
	openssl sha256 $(awk '{print $9}' $ydbdist/install_permissions.log) > $ydbdist/install_sha256_checksum.log
else
	sha256sum $(awk '{print $9}' $ydbdist/install_permissions.log) > $ydbdist/install_sha256_checksum.log
fi
chmod 0444 $ydbdist/install_sha256_checksum.log
chown ${owner}:${bingroup} $ydbdist/install_sha256_checksum.log
